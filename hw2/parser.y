%top{
#include <stdio.h>
int yylex();
void yyerror(const char* error_message);
}

/* primitive datatypes */
%token DATATYPE_INT DATATYPE_DOUBLE DATATYPE_FLOAT DATATYPE_CHAR DATATYPE_SIGNED DATATYPE_UNSIGNED DATATYPE_LONG DATATYPE_SHORT

/* operators */
%token PLUS MINUS MULTIPLE DIVIDE MOD TWO_MINUS TWO_PLUS LESS LESS_THAN GREATER GREATER_THAN SAME NOT_EQUAL EQUAL AND OR NOT BI_AND BI_OR BI_XOR BI_COMPLEMENT LEFT_SHIFT RIGHT_SHIFT

/* punctuations */
%token GRAVE_ACCENT POUND DOLLAR COLON SEMICOLON COMMA DOT LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET LEFT_BRACKET RIGHT_BRACKET LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET AT_SIGN

/* keywords */
%token VOID FOR DO WHILE BREAK CONTINUE IF ELSE AUTO CONST STATIC UNION ENUM GOTO REGISTER SIZEOF TYPEDEF VOLATILE EXTERN RETURN STRUCT SWITCH CASE DEFAULT

/* token types */
%token TOKEN_IDENTIFIER TOKEN_STRING TOKEN_CHARACTER TOKEN_INTEGER TOKEN_DOUBLE TOKEN_SCI_NOT

%start starting_unit

%%



datatype: DATATYPE_INT | DATATYPE_DOUBLE | DATATYPE_FLOAT | DATATYPE_CHAR;

%%

int main () {
    yyparse();
    printf("Parsed Successfully");
    return 0;
}

void yyerror(const char* error_message) {
    
}

